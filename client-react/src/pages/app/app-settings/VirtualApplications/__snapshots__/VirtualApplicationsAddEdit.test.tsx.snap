// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Virtual Applications Add/Edit Shallow Testing render matches snapshot: DefaultSnapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <VirtualApplicationsAddEdit
    values={
      Object {
        "virtualApplications": Array [],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <StyledTextFieldBase
          id="extension"
          label="Physical Path"
          onChanged={[Function]}
          value={undefined}
        />,
        <StyledTextFieldBase
          id="value"
          label="Virtual Path"
          onChanged={[Function]}
          value={undefined}
        />,
        <StyledToggleBase
          defaultChecked={undefined}
          id="sticky"
          label="Directory or Application"
          offText="Application"
          onChanged={[Function]}
          onText="Directory"
        />,
        <StyledToggleBase
          defaultChecked={undefined}
          id="preloadEnabled"
          label="Preload Enabled"
          offText="Off"
          onChanged={[Function]}
          onText="On"
        />,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "id": "extension",
          "label": "Physical Path",
          "onChanged": [Function],
          "value": undefined,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "id": "value",
          "label": "Virtual Path",
          "onChanged": [Function],
          "value": undefined,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "defaultChecked": undefined,
          "id": "sticky",
          "label": "Directory or Application",
          "offText": "Application",
          "onChanged": [Function],
          "onText": "Directory",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "defaultChecked": undefined,
          "id": "preloadEnabled",
          "label": "Preload Enabled",
          "offText": "Off",
          "onChanged": [Function],
          "onText": "On",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <StyledTextFieldBase
            id="extension"
            label="Physical Path"
            onChanged={[Function]}
            value={undefined}
          />,
          <StyledTextFieldBase
            id="value"
            label="Virtual Path"
            onChanged={[Function]}
            value={undefined}
          />,
          <StyledToggleBase
            defaultChecked={undefined}
            id="sticky"
            label="Directory or Application"
            offText="Application"
            onChanged={[Function]}
            onText="Directory"
          />,
          <StyledToggleBase
            defaultChecked={undefined}
            id="preloadEnabled"
            label="Preload Enabled"
            offText="Off"
            onChanged={[Function]}
            onText="On"
          />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "id": "extension",
            "label": "Physical Path",
            "onChanged": [Function],
            "value": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "id": "value",
            "label": "Virtual Path",
            "onChanged": [Function],
            "value": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "defaultChecked": undefined,
            "id": "sticky",
            "label": "Directory or Application",
            "offText": "Application",
            "onChanged": [Function],
            "onText": "Directory",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "defaultChecked": undefined,
            "id": "preloadEnabled",
            "label": "Preload Enabled",
            "offText": "Off",
            "onChanged": [Function],
            "onText": "On",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
