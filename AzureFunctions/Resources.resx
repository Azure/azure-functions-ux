<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="functionCreateErrorDetails" xml:space="preserve">
    <value>Create Function Error: {{error}}</value>
  </data>
  <data name="functionCreateErrorMessage" xml:space="preserve">
    <value>Function creation error! Please try again.</value>
  </data>
  <data name="gettingStarted_createGetStarted" xml:space="preserve">
    <value>Create + get started</value>
  </data>
  <data name="gettingStarted_functionApps" xml:space="preserve">
    <value>Function Apps</value>
  </data>
  <data name="gettingStarted_getStarted" xml:space="preserve">
    <value>Get started with Azure Functions</value>
  </data>
  <data name="gettingStarted_newFunctionApp" xml:space="preserve">
    <value>New function app</value>
  </data>
  <data name="gettingStarted_noFunApps" xml:space="preserve">
    <value>Your subscription contains no function apps. These are containers where your functions are executed. Create one now.</value>
  </data>
  <data name="gettingStarted_orCreate" xml:space="preserve">
    <value>Or create a function app from &lt;a href="https://portal.azure.com/#create/Microsoft.FunctionApp"&gt;Azure Portal&lt;/a&gt;.</value>
  </data>
  <data name="gettingStarted_selectLocation" xml:space="preserve">
    <value>Select Location</value>
  </data>
  <data name="gettingStarted_selectSubscription" xml:space="preserve">
    <value>Select Subscription</value>
  </data>
  <data name="gettingStarted_subIsNotWhitelisted" xml:space="preserve">
    <value>Subscription {{displayName}} ({{ subscriptionId }}) is not white listed for running functions</value>
  </data>
  <data name="gettingStarted_thisSub" xml:space="preserve">
    <value>This subscription contains one or more function apps. These are containers where your functions are executed. Select one or create a new one below.</value>
  </data>
  <data name="gettingStarted_validateContainer1" xml:space="preserve">
    <value>The name must be at least 2 characters</value>
  </data>
  <data name="gettingStarted_validateContainer2" xml:space="preserve">
    <value>The name must be at most 60 characters</value>
  </data>
  <data name="gettingStarted_validateContainer3" xml:space="preserve">
    <value>The name can contain letters, numbers, and hyphens (but the first and last character must be a letter or number)</value>
  </data>
  <data name="gettingStarted_validateContainer4" xml:space="preserve">
    <value>function app name {{name}} isn't available</value>
  </data>
  <data name="gettingStarted_youNeed" xml:space="preserve">
    <value>You need an Azure subscription in order to use this service. &lt;a href="https://azure.microsoft.com/en-us/free/"&gt;Click here&lt;/a&gt; to create a free trial subscription</value>
  </data>
  <data name="gettingStarted_yourFunctionApps" xml:space="preserve">
    <value>Your function apps</value>
  </data>
  <data name="gettingStarted_yourSubscription" xml:space="preserve">
    <value>Your subscription</value>
  </data>
  <data name="intro_chooseLanguage" xml:space="preserve">
    <value>2) Choose a language:</value>
  </data>
  <data name="intro_chooseScenario" xml:space="preserve">
    <value>1) Choose a scenario:</value>
  </data>
  <data name="intro_createThisFunction" xml:space="preserve">
    <value>Create this function</value>
  </data>
  <data name="intro_createYourOwn" xml:space="preserve">
    <value>Or create your own custom function</value>
  </data>
  <data name="intro_dataProcessing" xml:space="preserve">
    <value>Data processing</value>
  </data>
  <data name="intro_fasterWay" xml:space="preserve">
    <value>The faster way to functions</value>
  </data>
  <data name="intro_getStarted" xml:space="preserve">
    <value>Get started quickly with a premade function</value>
  </data>
  <data name="intro_getStartedOn" xml:space="preserve">
    <value>Or get started on your own</value>
  </data>
  <data name="intro_ifYou" xml:space="preserve">
    <value>If you'd prefer another supported language, choose "Create a function from scratch".</value>
  </data>
  <data name="intro_startSC" xml:space="preserve">
    <value>start from source control.</value>
  </data>
  <data name="intro_timer" xml:space="preserve">
    <value>Timer</value>
  </data>
  <data name="intro_webHook" xml:space="preserve">
    <value>Webhook + API</value>
  </data>
  <data name="intro_writeAny" xml:space="preserve">
    <value>Write any function in minutes - whether to run a simple job that cleans up a database or to build a more complex architecture. Creating functions is easier than ever before, whatever your chosen OS, platform, or development method. No install required.</value>
  </data>
  <data name="name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="open" xml:space="preserve">
    <value>Open</value>
  </data>
  <data name="or" xml:space="preserve">
    <value>or</value>
  </data>
  <data name="region" xml:space="preserve">
    <value>Region</value>
  </data>
  <data name="subscription" xml:space="preserve">
    <value>Subscription</value>
  </data>
</root>