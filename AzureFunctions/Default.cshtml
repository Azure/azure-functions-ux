<!doctype html>
<html>
@{
    var isAzure = !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("WEBSITE_SITE_NAME"));
    bool isOnPrem = System.Configuration.ConfigurationManager.AppSettings["RuntimeType"] == "OnPrem";

    var slotName = Environment.GetEnvironmentVariable("FUNCTIONS_SLOT_NAME");
    var cdn = string.Empty;
    if(slotName == "production")
    {
        cdn = "https://functions.azureedge.net";
    }
    else if(slotName == "next")
    {
        cdn = "https://functions-next.azureedge.net";
    }

    var version = AzureFunctions.Common.Constants.CurrentCommitId;
    var aiIinstrumentationKey = Environment.GetEnvironmentVariable("aiInstrumentationKey");
    var mpIinstrumentationKey = Environment.GetEnvironmentVariable("mpInstrumentationKey");
    
}
<head>
    <meta charset="utf-8">
    <title>AzureFunctions</title>
    @{
        if (!isAzure && !isOnPrem)
        {
    <base href="ng2app/">
        }
    }
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <script type="text/javascript">
        window.appsvc = {
            env : {
                hostName: '@Environment.GetEnvironmentVariable("WEBSITE_HOSTNAME")'
            }
        };
    </script>
</head>
<body>
    <app-root></app-root>
    @if (isAzure && !isOnPrem)
    {
        <script type="text/javascript" src="@cdn/inline.js?v=@version"></script>
        <script type="text/javascript" src="@cdn/styles.bundle.js?v=@version"></script>
        <script type="text/javascript" src="@cdn/main.bundle.js?v=@version"></script>
        <script type="text/javascript" src="@cdn/scripts.bundle.js?v=@version"></script>
    } else {
        <script type="text/javascript" src="inline.js"></script>
        <script type="text/javascript" src="styles.bundle.js"></script>
        <script type="text/javascript" src="main.bundle.js"></script>
        <script type="text/javascript" src="scripts.bundle.js"></script>
    }

    <script src="assets/monaco/min/vs/loader.js"></script>

    @{
        if (isAzure && !isOnPrem)
        {
            if (!string.IsNullOrEmpty(aiIinstrumentationKey))
            {
                <script type="text/javascript" src="https://az416426.vo.msecnd.net/scripts/a/ai.0.js"></script>
                <script type="text/javascript"> var appInsights = window.appInsights || function (config) { function r(config) { t[config] = function () { var i = arguments; t.queue.push(function () { t[config].apply(t, i) }) } } var t = { config: config }, u = document, e = window, o = "script", s = u.createElement(o), i, f; s.src = config.url || "https://az416426.vo.msecnd.net/scripts/a/ai.0.js"; u.getElementsByTagName(o)[0].parentNode.appendChild(s); try { t.cookie = u.cookie } catch (h) { } for (t.queue = [], i = ["Event", "Exception", "Metric", "PageView", "Trace", "Dependency"]; i.length;) r("track" + i.pop()); return r("setAuthenticatedUserContext"), r("clearAuthenticatedUserContext"), config.disableExceptionTracking || (i = "onerror", r("_" + i), f = e[i], e[i] = function (config, r, u, e, o) { var s = f && f(config, r, u, e, o); return s !== !0 && t["_" + i](config, r, u, e, o), s }), t }({ instrumentationKey: "@aiIinstrumentationKey" }); window.appInsights = appInsights; appInsights.trackPageView();</script>
            }
        }
        else
        {
            if (!string.IsNullOrEmpty(aiIinstrumentationKey) && !isOnPrem)
            {
                <script type="text/javascript" src="https://az416426.vo.msecnd.net/scripts/a/ai.0.js"></script>
                <script type="text/javascript"> var appInsights = window.appInsights || function (config) { function r(config) { t[config] = function () { var i = arguments; t.queue.push(function () { t[config].apply(t, i) }) } } var t = { config: config }, u = document, e = window, o = "script", s = u.createElement(o), i, f; s.src = config.url || "https://az416426.vo.msecnd.net/scripts/a/ai.0.js"; u.getElementsByTagName(o)[0].parentNode.appendChild(s); try { t.cookie = u.cookie } catch (h) { } for (t.queue = [], i = ["Event", "Exception", "Metric", "PageView", "Trace", "Dependency"]; i.length;) r("track" + i.pop()); return r("setAuthenticatedUserContext"), r("clearAuthenticatedUserContext"), config.disableExceptionTracking || (i = "onerror", r("_" + i), f = e[i], e[i] = function (config, r, u, e, o) { var s = f && f(config, r, u, e, o); return s !== !0 && t["_" + i](config, r, u, e, o), s }), t }({ instrumentationKey: "@aiIinstrumentationKey", enableDebug: true, maxAjaxCallsPerView: 10000 }); window.appInsights = appInsights; appInsights.trackPageView();</script>
            }
        }
        if (!string.IsNullOrEmpty(mpIinstrumentationKey) && !isOnPrem)
        {
            <!-- start Mixpanel -->
            <script type="text/javascript">
                (function (e, b) { if (!b.__SV) { var a, f, i, g; window.mixpanel = b; b._i = []; b.init = function (a, e, d) { function f(b, h) { var a = h.split("."); 2 == a.length && (b = b[a[0]], h = a[1]); b[h] = function () { b.push([h].concat(Array.prototype.slice.call(arguments, 0))) } } var c = b; "undefined" !== typeof d ? c = b[d] = [] : d = "mixpanel"; c.people = c.people || []; c.toString = function (b) { var a = "mixpanel"; "mixpanel" !== d && (a += "." + d); b || (a += " (stub)"); return a }; c.people.toString = function () { return c.toString(1) + ".people (stub)" }; i = "disable time_event track track_pageview track_links track_forms register register_once alias unregister identify name_tag set_config people.set people.set_once people.increment people.append people.union people.track_charge people.clear_charges people.delete_user".split(" "); for (g = 0; g < i.length; g++) f(c, i[g]); b._i.push([a, e, d]) }; b.__SV = 1.2; a = e.createElement("script"); a.type = "text/javascript"; a.async = !0; a.src = "undefined" !== typeof MIXPANEL_CUSTOM_LIB_URL ? MIXPANEL_CUSTOM_LIB_URL : "file:" === e.location.protocol && "//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js".match(/^\/\//) ? "https://cdn.mxpnl.com/libs/mixpanel-2-latest.min.js" : "//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js"; f = e.getElementsByTagName("script")[0]; f.parentNode.insertBefore(a, f) } })(document, window.mixpanel || []); mixpanel.init("@mpIinstrumentationKey", { cross_subdomain_cookie: true });
            </script>
            <!-- end Mixpanel -->
        }
    }

</body>
</html>
